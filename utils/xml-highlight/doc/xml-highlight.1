.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "xml-highlight" "1" "2020-09-01" "" "xml-utils"
.hy
.SH NAME
.PP
xml-highlight - Highlight syntax in XML documents
.SH SYNOPSIS
.IP
.nf
\f[C]
xml-highlight [options] [<document>...]
\f[R]
.fi
.SH DESCRIPTION
.PP
The \f[I]xml-highlight\f[R] tool adds syntax highlighting to program
listings in an XML document.
By default this is accomplished by wrapping detected syntax in XSL-FO
inline elements with the proper namespace to allow a stylesheet to pass
them through to the final FO processor.
The actual elements used can be customized, however.
.PP
To enable highlighting on text in an element, include the processing
instruction \f[C]<?language ...?>\f[R] in the element, where
\f[C]...\f[R] is the name of the language.
.SH OPTIONS
.TP
-c, --classes <classes>
Use a custom class definitions file.
.TP
-f, --overwrite
Overwrite input XML file(s) instead of outputting to stdout.
.TP
-h, -?, --help
Show help/usage message.
.TP
-s, --syntax <syntax>
Use a custom syntax definitions file.
.TP
--version
Show version information.
.PP
In addition, the following options allow configuration of the XML
parser:
.TP
--dtdload
Load the external DTD.
.TP
--huge
Remove any internal arbitrary parser limits.
.TP
--net
Allow network access to load external DTD and entities.
.TP
--noent
Resolve entities.
.TP
--xinclude
Do XInclude processing.
.TP
--xml-catalog <file>
Use an XML catalog when resolving entities.
Multiple catalogs may be loaded by specifying this option multiple
times.
.SH CLASS FILE FORMAT
.PP
The following describes the format of the custom class file specified
with -c.
.SS Classes
.PP
\f[I]Markup element:\f[R] <\f[C]classes\f[R]>
.PP
\f[I]Attributes:\f[R]
.IP \[bu] 2
None
.PP
\f[I]Child elements:\f[R]
.IP \[bu] 2
<\f[C]class\f[R]>
.SS Class
.PP
Represents a type of syntax and how it should be highlighted.
This element can also occur within the \f[C]syntax\f[R] element or
within a particular \f[C]language\f[R] element, in which case it is
specific to that language.
.PP
\f[I]Markup element:\f[R] <\f[C]class\f[R]>
.PP
\f[I]Attributes:\f[R]
.IP \[bu] 2
\f[C]id\f[R], the identifier of the class.
.PP
\f[I]Child elements:\f[R]
.PP
The element \f[C]class\f[R] contains one child element of any kind,
which any matching syntax will be wrapped in to.
.SS Example custom classes file
.IP
.nf
\f[C]
<classes xmlns:fo=\[dq]http://www.w3.org/1999/XSL/Format\[dq]>
<class id=\[dq]type\[dq]>
<fo:inline color=\[dq]green\[dq]/>
</class>
<class id=\[dq]control\[dq]>
<fo:inline color=\[dq]blue\[dq]/>
</class>
<class id=\[dq]string\[dq]>
<fo:inline color=\[dq]red\[dq]/>
</class>
<class id=\[dq]comment\[dq]>
<fo:inline color=\[dq]pink\[dq]/>
</class>
</classes>
\f[R]
.fi
.SH SYNTAX FILE FORMAT
.PP
The following describes the format of the custom syntax file specified
with -s.
.SS Syntax
.PP
\f[I]Markup element:\f[R] <\f[C]syntax\f[R]>
.PP
\f[I]Attributes:\f[R]
.IP \[bu] 2
None
.PP
\f[I]Child elements:\f[R]
.IP \[bu] 2
\f[C]class\f[R]
.IP \[bu] 2
\f[C]language\f[R]
.SS Language
.PP
Describes the syntax of a particular language.
.PP
\f[I]Markup element:\f[R] <\f[C]language\f[R]>
.PP
\f[I]Attributes:\f[R]
.IP \[bu] 2
\f[C]name\f[R], the identifier of the language.
.IP \[bu] 2
\f[C]caseInsensitive\f[R], indicates whether keywords are
case-insensitive in this language, with one of the following values:
.RS 2
.IP \[bu] 2
\f[C]\[dq]no\[dq]\f[R] - Keywords are case-sensitive (default)
.IP \[bu] 2
\f[C]\[dq]yes\[dq]\f[R] - Keywords are case-insensitive
.RE
.PP
\f[I]Child elements:\f[R]
.IP \[bu] 2
<\f[C]class\f[R]>
.IP \[bu] 2
<\f[C]area\f[R]>
.IP \[bu] 2
<\f[C]keyword\f[R]>
.SS Area
.PP
Matches a section of delimited text, such as strings, comments, etc.
.PP
\f[I]Markup element:\f[R] <\f[C]area\f[R]>
.PP
\f[I]Attributes:\f[R]
.IP \[bu] 2
\f[C]start\f[R], the opening delimiter.
.IP \[bu] 2
\f[C]end\f[R], the closing delimiter.
.IP \[bu] 2
\f[C]class\f[R], reference to the \f[C]class\f[R] element to use for
this area.
.PP
\f[I]Child elements:\f[R]
.PP
If attribute \f[C]class\f[R] is not used, this element can contain one
element of any kind, in which the text matching the area will be
wrapped.
.SS Keyword
.PP
Matches a particular keyword.
.PP
\f[I]Markup element:\f[R] <\f[C]keyword\f[R]>
.PP
\f[I]Attributes:\f[R]
.IP \[bu] 2
\f[C]match\f[R], the keyword to match.
.IP \[bu] 2
\f[C]class\f[R], reference to the \f[C]class\f[R] element to use for
this keyword.
.PP
\f[I]Child elements:\f[R]
.PP
If attribute \f[C]class\f[R] is not used, this element can contain one
element of any kind, in which the text matching the keyword will be
wrapped.
.SS Example custom syntax file
.IP
.nf
\f[C]
<syntax>
<language name=\[dq]c\[dq]>
<area start=\[dq]&quot;\[dq] end=\[dq]&quot;\[dq] class=\[dq]string\[dq]/>
<area start=\[dq]/*\[dq] end=\[dq]*/\[dq] class=\[dq]comment\[dq]/>
<keyword match=\[dq]if\[dq] class=\[dq]control\[dq]/>
<keyword match=\[dq]else\[dq] class=\[dq]control\[dq]/>
<keyword match=\[dq]int\[dq] class=\[dq]type\[dq]/>
<keyword match=\[dq]char\[dq] class=\[dq]type\[dq]/>
</language>
</syntax>
\f[R]
.fi
.SH BUILT-IN LANGUAGES
.PP
The following is a list of language syntaxes currently built-in to the
tool:
.IP \[bu] 2
c
.IP \[bu] 2
csharp
.IP \[bu] 2
go
.IP \[bu] 2
java
.IP \[bu] 2
javascript
.IP \[bu] 2
pascal
.IP \[bu] 2
python
.IP \[bu] 2
ruby
.IP \[bu] 2
rust
.IP \[bu] 2
sh
.IP \[bu] 2
sql
.IP \[bu] 2
xml
.IP \[bu] 2
xsl
.SH AUTHORS
khzae.net.
